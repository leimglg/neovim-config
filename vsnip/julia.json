{
    "Function": {
        "prefix": ["function ()"],
        "body": ["function ${1:funcName}()", "\t$0", "end"],
        "description": ["function"]
    },
    "For": {
        "prefix": ["for "],
        "body": ["for ${1:i} = ${2:1} : ${3:5}", "\t$0", "end"],
        "description": ["for"]
    },
    "Openr": {
        "prefix": ["open(r"],
        "body": ["open(${1:file}, \"r\") do io", "\twhile !eof(${2:file})", "\t\t$0readline(io)", "\tend", "end"],
        "description": ["open file write"]
    },
    "Openw": {
        "prefix": ["open(w"],
        "body": ["open(${1:file}, \"w\") do io", "\tprintln(io, $0)", "end"],
        "description": ["open file write"]
    },
    "if": {
        "prefix": ["if "],
        "body": ["if ${1:condition}", "\t$0", "end"],
        "description": ["if"]
    },
    "run": {
        "prefix": ["run("],
        "body": ["run(`${1:echo 0}`, wait=${2:false})", "wait(${3:a})"],
        "description": ["return if an element of an array is #undef"]
    },
    "Using": {
        "prefix": ["using"],
        "body": [
            "using LinearAlgebra",
            "using FortranFiles",
            "using Printf",
            "using BenchmarkTools",
            "using InteractiveUtils"
        ],
        "description": ["using"]
    },
    "LinearAlgebra": {
        "prefix": ["LinearAlgebra", "norm"],
        "body": ["using LinearAlgebra", "norm()", "⋅ ×"],
        "description": ["using LinearAlgebra"]
    },
    "FortranFiles": {
        "prefix": ["FortranFiles"],
        "body": ["using FortranFiles", "ffile = FortranFiles(\"Grid.x\",\"w\")", "write(ffile, Int32(1))", "close(ffile)", 
            "ffile = FortranFiles(\"Grid.x\", \"r\")", "read(ffile, Int32) :: Int32", "close(ffile)"],
        "description": ["using FortranFiles"]
    },
    "Printf": {
        "prefix": ["Printf", "sprintf"],
        "body": ["using Printf", "@sprintf \"%15.6f %05d\" 1 2"],
        "description": ["using Printf"]
    },
    "BenchmarkTools": {
        "prefix": ["BenchmarkTools", "@btime"],
        "body": ["using BenchmarkTools", "@btime print(1)"],
        "description": ["using BenchmarkTools"]
    },
    "InteractiveUtils": {
        "prefix": ["InteractiveUtils", "@code_warntype"],
        "body": ["using InteractiveUtils", "@code_warntype println(1)"],
        "description": ["using InteractiveUtils"]
    },
    "Array": {
        "prefix": ["array manipulation", "vcat", "hcat", "cat", "reshape!", "pop!", "popfirst!", "deleteat!", "permutedims", "argmax", "eachrow", "eachcol"],
        "body": ["vcat(A, A)", "hcat(A, A)", "cat(dim=3, A, A)", "reshape!(A, (3,5))", "pop!(A)", "popfirst!(A)", "deleteat!(A, i)", "permutedims(A, [3,2,1])", "argmax(A)", "[i for i = 1:3 for j = i:2]", "[i for i = 1:3, j = 1:2]", "eachrow(A)", "eachcol(A)", "A[A.>0]", "filter(x -> x > 0, [-1, 0, 1])"],
        "description": ["Array manipulation"]
    },
    "Type vector of vector": {
        "prefix": ["Vector{Float64}[]", "Type: vector of vector"],
        "body": ["Vector{${1:Float64}}[]", "push!(${2:A}, [1,1])"],
        "description": ["type vector"]
    },
    "Type vector of vector of vector": {
        "prefix": ["Vector{Vector{Float64}}[]", "Type: vector of vector of vector"],
        "body": ["Vector{Vector{${1:Float64}}}[]", "push!(${2:A}, [[1,1],[2,2]])"],
        "description": ["type vector of vector"]
    },
    "Type array": {
        "prefix": ["Array{Float64}(undef,0)", "Type: array"],
        "body": ["Array{${1:Float64}}(undef, ${2:2}, ${3:3})", "A[1,3]=5"],
        "description": ["type array"]
    },
    "Type vector of array": {
        "prefix": ["Array{Float64}[]", "Type: vector of array"],
        "body": ["Array{${1:Float64}}[]", "push!(${2:A}, [1 2; 3 4])"],
        "description": ["type vector of array"]
    },
    "Regex": {
        "prefix": ["r\"", "regex"],
        "body": ["r\"^marker\\.[0-9]{7}\\$\"", "r\"[^0-9]\"", "r\".*\"", "r\"[0-9A-Za-z]\""],
        "description": ["regex"]
    },
    "String": {
        "prefix": ["findfirst", "split", "string", "tryparse", "raw\""],
        "body": ["findfirst(\"zone\", \"zone 1\")", "split(\"1a b2 c3d\", r\"[^0-9]\", keepempty=false)", "tryparse.(Float64, split(\"1 2 ds\"))", "raw\"c:\\1\\2\""],
        "description": ["string"]
    },
    "Function examples": {
        "prefix": ["function examples"],
        "body": ["f(a::T1, b::T2=5) where T1<:Real where T2<:Integer = a + b"],
        "description": ["function examples"]
    },
    "Costants": {
        "prefix": ["ARGS", "constants", "PROGRAM_FILE", "@__FILE__", "@__DIR__", "@__LINE__"],
        "body": ["ARGS[1]", "PROGRAM_FILE", "@__FILE__", "@__DIR__", "@__LINE__"],
        "description": ["constants"]
    },
    "Internal functions": {
        "prefix": ["@isdefined", "isassigned", "internal function"],
        "body": ["@isdefined a", "A = Vector{Array{Int32}}(undef, 2); isassigned(A, 2)"],
        "description": ["internal functions"]
    }
}
