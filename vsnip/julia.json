{
    "Function": {
        "prefix": ["function ()"],
        "body": ["function ${1:funcName}()", "\t$0", "end"],
        "description": ["function"]
    },
    "For": {
        "prefix": ["for "],
        "body": ["for ${1:i} = ${2:1} : ${3:5}", "\t$0", "end"],
        "description": ["for"]
    },
    "Openr": {
        "prefix": ["open(r"],
        "body": ["open(${1:file}, \"r\") do io", "\twhile !eof(${2:file})", "\t\t$0readline(io)", "\tend", "end"],
        "description": ["open file write"]
    },
    "Openw": {
        "prefix": ["open(w"],
        "body": ["open(${1:file}, \"w\") do io", "\tprintln(io, $0)", "end"],
        "description": ["open file write"]
    },
    "if": {
        "prefix": ["if "],
        "body": ["if ${1:condition}", "\t$0", "end"],
        "description": ["if"]
    },
    "run": {
        "prefix": ["run("],
        "body": ["run(`${1:echo 0}`, wait=${2:false})", "wait(${3:a})"],
        "description": ["return if an element of an array is #undef"]
    },
    "Using": {
        "prefix": ["using"],
        "body": [
            "using LinearAlgebra",
            "using FortranFiles",
            "using Printf",
            "using BenchmarkTools",
            "using InteractiveUtils"
        ],
        "description": ["using"]
    },
    "LinearAlgebra": {
        "prefix": ["LinearAlgebra", "norm"],
        "body": ["using LinearAlgebra", "norm()", "⋅ ×"],
        "description": ["using LinearAlgebra"]
    },
    "FortranFiles": {
        "prefix": ["FortranFiles"],
        "body": ["using FortranFiles", "ffile = FortranFiles(\"Grid.x\",\"w\")", "write(ffile, Int32(1))", "close(ffile)", 
            "ffile = FortranFiles(\"Grid.x\", \"r\")", "read(ffile, Int32) :: Int32", "close(ffile)"],
        "description": ["using FortranFiles"]
    },
    "Printf": {
        "prefix": ["Printf", "sprintf"],
        "body": ["using Printf", "@sprintf \"%15.6f %05d\" 1 2"],
        "description": ["using Printf"]
    },
    "BenchmarkTools": {
        "prefix": ["BenchmarkTools", "@btime"],
        "body": ["using BenchmarkTools", "@btime print(1)"],
        "description": ["using BenchmarkTools"]
    },
    "InteractiveUtils": {
        "prefix": ["InteractiveUtils", "@code_warntype"],
        "body": ["using InteractiveUtils", "@code_warntype println(1)"],
        "description": ["using InteractiveUtils"]
    },
    "Array": {
        "prefix": ["array manipulation", "vcat", "hcat", "cat", "reshape!", "pop!", "popfirst!", "deleteat!", "permutedims", "argmax", "eachrow", "eachcol"],
        "body": ["vcat(A, A)", "hcat(A, A)", "cat(dim=3, A, A)", "reshape!(A, (3,5))", "pop!(A)", "popfirst!(A)", "deleteat!(A, i)", "permutedims(A, [3,2,1])", "argmax(A)", "[i for i = 1:3 for j = i:2]", "[i for i = 1:3, j = 1:2]", "eachrow(A)", "eachcol(A)", "A[A.>0]", "filter(x -> x > 0, [-1, 0, 1])"],
        "description": ["Array manipulation"]
    },
    "Type vector of vector": {
        "prefix": ["Vector{Float64}[]", "Type: vector of vector"],
        "body": ["Vector{${1:Float64}}[]", "push!(${2:A}, [1,1])"],
        "description": ["type vector"]
    },
    "Type vector of vector of vector": {
        "prefix": ["Vector{Vector{Float64}}[]", "Type: vector of vector of vector"],
        "body": ["Vector{Vector{${1:Float64}}}[]", "push!(${2:A}, [[1,1],[2,2]])"],
        "description": ["type vector of vector"]
    },
    "Type array": {
        "prefix": ["Array{Float64}(undef,0)", "Type: array"],
        "body": ["Array{${1:Float64}}(undef, ${2:2}, ${3:3})", "A[1,3]=5"],
        "description": ["type array"]
    },
    "Type vector of array": {
        "prefix": ["Array{Float64}[]", "Type: vector of array"],
        "body": ["Array{${1:Float64}}[]", "push!(${2:A}, [1 2; 3 4])"],
        "description": ["type vector of array"]
    },
    "Regex": {
        "prefix": ["r\"", "regex"],
        "body": ["r\"^marker\\.[0-9]{7}\\$\"", "r\"[^0-9]\"", "r\".*\"", "r\"[0-9A-Za-z]\""],
        "description": ["regex"]
    },
    "String": {
        "prefix": ["findfirst", "split", "string", "tryparse", "raw\""],
        "body": ["findfirst(\"zone\", \"zone 1\")", "split(\"1a b2 c3d\", r\"[^0-9]\", keepempty=false)", "tryparse.(Float64, split(\"1 2 ds\"))", "raw\"c:\\1\\2\""],
        "description": ["string"]
    },
    "Function examples": {
        "prefix": ["function examples"],
        "body": ["f(a::T1, b::T2=5) where T1<:Real where T2<:Integer = a + b"],
        "description": ["function examples"]
    },
    "Costants": {
        "prefix": ["ARGS", "constants", "PROGRAM_FILE", "@__FILE__", "@__DIR__", "@__LINE__", "isfile", "ispath"],
        "body": ["ARGS[1]", "PROGRAM_FILE", "@__FILE__", "@__DIR__", "@__LINE__", "isfile", "ispath"],
        "description": ["constants"]
    },
    "Internal functions": {
        "prefix": ["@isdefined", "isassigned", "internal function"],
        "body": ["@isdefined a", "A = Vector{Array{Int32}}(undef, 2); isassigned(A, 2)"],
        "description": ["internal functions"]
    },
    "Picar sprintf": {
        "prefix": ["Picar sprintf"],
        "body": ["sprintf(a::Array{T}, b::Integer = 9999999) where T <: Real = join([(@sprintf \" %16.8f\" a[i]) * ( i % b == 0 ? \"\\n\" : \"\") for i = 1:length(a)])"],
        "description": ["Picar sprintf"]
    },
    "Picar sstroke": {
        "prefix": ["Picar sstroke"],
        "body": ["sstroke(s::Real) = [cos(s) 0 sin(s); 0 1 0; -sin(s) 0 cos(s) ]"],
        "description": ["Picar sstroke"]
    },
    "Picar ppitch": {
        "prefix": ["Picar ppitch"],
        "body": ["ppitch(p::Real) = [ cos(p) -sin(p) 0; sin(p) cos(p) 0; 0 0 1]"],
        "description": ["Picar ppitch"]
    },
    "Picar ddeviate": {
        "prefix": ["Picar ddeviate"],
        "body": ["ddeviation(d::Real) = [ 1 0 0; 0 cos(d) -sin(d); 0 sin(d) cos(d)]"],
        "description": ["Picar ddeviate"]
    },
    "Picar readmarker": {
        "prefix": ["Picar readmarker"],
        "body": [
            "function readmarker(filename::String)",
            "\tprintln(\"reading \\$filename\")",
            "\tlines = readlines(filename)",
            "\tiline, ibody = 0, 0",
            "\tmarkers = Array{Array{Float64}}(undef, 0)",
            "\telements = Array{Array{Int64}}(undef, 0)",
            "\twhile iline < length(lines)",
            "\t\tiline += 1",
            "\t\tif findfirst(\"ZONE \",lines[iline]) != nothing",
            "\t\t\tibody += 1",
            "\t\t\tnvortex, nele = filter(x-> x!=nothing,tryparse.(Int64, split(lines[iline], r\"[^0-9]\", keepempty=false)))",
            "\t\t\tmarker_, element_ = Float64[], Float64[]",
            "\t\t\tfor iiline = iline + 1 : iline + nvortex",
            "\t\t\t\tpush!(marker_, parse.(Float64, split(lines[iiline]))...)",
            "\t\t\tend",
            "\t\t\tfor iiline = iline + nvortex + 1 : iline + nvortex + nele",
            "\t\t\t\tpush!(element_, parse.(Int64, split(lines[iiline]))...)",
            "\t\t\tend",
            "\t\t\tiline = iline + nvortex + nele ",
            "\t\t\tprintln(\"body \\$ibody, nvortex: \\$nvortex, nelement: \\$nele\")",
            "\t\t\tpush!(markers, reshape(marker_, (3, nvortex)))",
            "\t\t\tpush!(elements, reshape(element_, (3, nele)))",
            "\t\tend",
            "\tend",
            "\tmarkers, elements",
            "end"
        ],
        "description": ["Picar readmarker"]
    },
    "Picar readmarkerT": {
        "prefix": ["Picar readmarkerT"],
        "body": [
            "function readmarkerT(filename::String)",
            "\tprintln(\"reading \\$filename\")",
            "\tmarkerfile = open(filename,\"r\")",
            "\tmarkervalues = Array{Array{Float64}}(undef,0)",
            "\televalues = Array{Array{Float64}}(undef,0)",
            "\tmarkers = Array{Array{Float64}}(undef,0)",
            "\telements = Array{Array{Int32}}(undef,0)",
            "\tareas = Array{Array{Float64}}(undef,0)",
            "\tmarkerbody = 0",
            "\twhile !eof(markerfile)",
            "\t\tline = readline(markerfile)",
            "\t\tif findfirst(\"ZONE \", line) != nothing",
            "\t\t\tmarkerbody += 1",
            "\t\t\televalue = Array{Array{Float64}}(undef,0)",
            "\t\t\tmarker = Array{Array{Float64}}(undef,0)",
            "\t\t\telement = Array{Array{Int32}}(undef,0)",
            "\t\t\tnvortex, nele = filter(x-> x!=nothing,tryparse.(Int64, split(line, r\"[^0-9]\", keepempty=false)))",
            "\t\t\tprintln(\"body = \", markerbody, \", nvortex = \", nvortex, \", nelement = \", nele)",
            "\t\t\treadline(markerfile)",
            "\t\t\tprint(\"length check = \")",
            "\t\t\tfor ivariable = 1:7",
            "\t\t\t\tvars = Float64[]",
            "\t\t\t\twhile length(vars) < (ivariable <= 3 ? nvortex : nele)",
            "\t\t\t\t\tline = readline(markerfile)",
            "\t\t\t\t\tvars_ = Array{Union{Nothing, Float64},1}(tryparse.(Float64,split(line)))",
            "\t\t\t\t\tvars_[vars_.==nothing] .= 0",
            "\t\t\t\t\tpush!(vars, vars_...)",
            "\t\t\t\tend",
            "\t\t\t\tprint(length(vars),\" \")",
            "\t\t\t\tivariable <= 3 && push!(marker, vars)",
            "\t\t\t\tivariable > 3 && push!(elevalue, vars)",
            "\t\t\tend",
            "\t\t\tmarker = [marker[i][j] for i = 1:3, j = 1:nvortex]",
            "\t\t\televalue = [elevalue[i][j] for i = 1:4, j = 1:nele]",
            "\t\t\tfor iele = 1:nele",
            "\t\t\t\tline = readline(markerfile)",
            "\t\t\t\teles_ = parse.(Int32, split(line))",
            "\t\t\t\tpush!(element, eles_)",
            "\t\t\tend",
            "\t\t\telement = [element[j][i] for i = 1:3, j = 1:nele]",
            "\t\t\tarea = calAreaNorm(marker, element)[1]",
            "\t\t\tprintln(\", area = \\$(sum(area))\")",
            "\t\t\tmarkerarea = zeros(nvortex)",
            "\t\t\tmarkervalue = zeros(4, nvortex)",
            "\t\t\tfor iele = 1:nele",
            "\t\t\t\tfor imarker = element[:, iele]",
            "\t\t\t\t\tmarkerarea[imarker] += area[iele]",
            "\t\t\t\t\tmarkervalue[:, imarker] += elevalue[:, iele] * area[iele]",
            "\t\t\t\tend",
            "\t\t\tend",
            "\t\t\tmarkervalue ./= markerarea'",
            "\t\t\tpush!(markers, marker)",
            "\t\t\tpush!(elements, element)",
            "\t\t\tpush!(markervalues, markervalue)",
            "\t\t\tpush!(elevalues, elevalue)",
            "\t\t\tpush!(areas, area)",
            "\t\tend",
            "\tend",
            "\tclose(markerfile)",
            "\t# markers[ibody][1:3, imarker]",
            "\tmarkers, elements, markervalues, elevalues, areas",
            "end"
        ],
        "description": ["Picar readmarkerT"]
    },
    "Picar readmarkerT2": {
        "prefix": ["Picar readmarkerT2"],
        "body": [
            "function readmarkerT(filename::String)",
            "\tprintln(\"reading \\$filename\")",
            "\tmarkerfile = open(filename,\"r\")",
            "\tmarkers = Array{Array{Float64}}(undef,0)",
            "\telements = Array{Array{Int32}}(undef,0)",
            "\tmarkerbody = 0",
            "\twhile !eof(markerfile)",
            "\t\tline = readline(markerfile)",
            "\t\tif findfirst(\"ZONE \", line) != nothing",
            "\t\t\tmarkerbody += 1",
            "\t\t\tmarker = Array{Array{Float64}}(undef,0)",
            "\t\t\telement = Array{Array{Int32}}(undef,0)",
            "\t\t\tnvortex, nele = filter(x-> x!=nothing,tryparse.(Int64, split(line, r\"[^0-9]\", keepempty=false)))",
            "\t\t\tprintln(\"body = \", markerbody, \", nvortex = \", nvortex, \", nelement = \", nele)",
            "\t\t\tprint(\"length check = \")",
            "\t\t\tfor ivariable = 1:7",
            "\t\t\t\tvars = Float64[]",
            "\t\t\t\twhile length(vars) < (ivariable <= 3 ? nvortex : nele)",
            "\t\t\t\t\tline = readline(markerfile)",
            "\t\t\t\t\tvars_ = Array{Union{Nothing, Float64},1}(tryparse.(Float64,split(line)))",
            "\t\t\t\t\tvars_[vars_.==nothing] .= 0",
            "\t\t\t\t\tpush!(vars, vars_...)",
            "\t\t\t\tend",
            "\t\t\t\tprint(length(vars),\" \")",
            "\t\t\t\tivariable <= 3 && push!(marker, vars)",
            "\t\t\tend",
            "\t\t\tprintln()",
            "\t\t\tmarker = [marker[i][j] for i = 1:3, j = 1:nvortex]",
            "\t\t\tfor iele = 1:nele",
            "\t\t\t\tline = readline(markerfile)",
            "\t\t\t\teles_ = parse.(Int32, split(line))",
            "\t\t\t\tpush!(element, eles_)",
            "\t\t\tend",
            "\t\t\telement = [element[j][i] for i = 1:3, j = 1:nele]",
            "\t\t\tpush!(markers, marker)",
            "\t\t\tpush!(elements, element)",
            "\t\tend",
            "\tend",
            "\tclose(markerfile)",
            "\t# markers[ibody][1:3, imarker]",
            "\tmarkers, elements",
            "end"
        ],
        "description": ["Picar readmarkerT2"]
    },
    "Picar readGrid": {
        "prefix": ["Picar readGrid"],
        "body": [
            "function readGrid()",
            "\tffile = FortranFile(\"Grid.x\",\"r\")",
            "\timax, jmax, kmax = read(ffile, Int32, Int32, Int32)",
            "\tprintln(\"Grid.x, grid size = \\$imax, \\$jmax, \\$kmax\")",
            "\tX, Y, Z = Array{Float32}(undef, imax, jmax, kmax), Array{Float32}(undef, imax, jmax, kmax), Array{Float32}(undef, imax, jmax, kmax)",
            "\tread(ffile, X, Y, Z)",
            "\tclose(ffile)",
            "\tFloat64.(X[:,1,1]), Float64.(Y[1,:,1]), Float64.(Z[1,1,:])",
            "end",
            "const X, Y, Z = readGrid()"
        ],
        "description": ["Picar readGrid"]
    },
    "Picar readDataBinary": {
        "prefix": ["Picar readDataBinary"],
        "body": [
            "function readDataBinary(filename::String)",
            "\tffile = FortranFile(filename,\"r\")",
            "\timax, jmax, kmax, nvar = read(ffile, (Int32, 4)) :: Array{Int32}",
            "\tprintln(\"\\$filename: grid size = \\$imax, \\$jmax, \\$kmax\")",
            "\tdatas = read(ffile, (Float32, imax, jmax, kmax, nvar)) :: Array{Float32}",
            "\tclose(ffile)",
            "\t[Float64.(datas[:, :, :, i]) for i = 1:nvar]",
            "end"
        ],
        "description": ["Picar readDataBinary"]
    },
    "Picar writeDataBinary": {
        "prefix": ["Picar writeDataBinary"],
        "body": [
            "function writeDataBinary(filename::String, datas::Array{T}...) where T <: AbstractFloat",
            "\tffile = FortranFile(filename,\"w\")",
            "\tnvar = length(datas)",
            "\tdatas = [Float32.(data) for data = datas]",
            "\timax, jmax, kmax = size(datas[1])",
            "\twrite(ffile, Int32.([imax, jmax, kmax, nvar])...)",
            "\twrite(ffile, datas...)",
            "\tclose(ffile)",
            "end"
        ],
        "description": ["Picar writeDataBinary"]
    },
    "Picar location": {
        "prefix": ["Picar location"],
        "body": [
            "function location(pos::Array{Float64})",
            "\t# The pos is inside X[ii-1, ii], Y[jj-1, jj], Z[kk-1, kk]. If pos is out of region, ii = 2 or imax",
            "\tii = jj = kk = 2",
            "\tfor i = 2:length(X)",
            "\t\tii = i",
            "\t\tX[i] > pos[1] && break",
            "\tend",
            "\tfor j = 2:length(Y)",
            "\t\tjj = j",
            "\t\tY[j] > pos[2] && break",
            "\tend",
            "\tfor k = 2:length(Z)",
            "\t\tkk = k",
            "\t\tZ[k] > pos[3] && break",
            "\tend",
            "\tii, jj, kk",
            "end"
        ],
        "description": ["Picar location"]
    },
    "Picar interpolation": {
        "prefix": ["Picar interpolation"],
        "body": [
            "interpolation(x::Float64, y::Float64, z::Float64) = interpolation([x,y,z])",
            "function interpolation(pos::Vector{Float64})",
            "\t# return the interpolation matrix and grid location",
            "\tii, jj, kk = location(pos)",
            "\tx1, y1, z1 = (X[ii] - pos[1]) / (X[ii] - X[ii-1]), (Y[jj] - pos[2]) / (Y[jj] - Y[jj-1]), (Z[kk] - pos[3]) / (Z[kk] - Z[kk-1])",
            "\tx2, y2, z2 = 1 .- (x1, y1, z1)",
            "\t[x1*y1*z1, x2*y1*z1, x1*y2*z1, x2*y2*z1, x1*y1*z2, x2*y1*z2, x1*y2*z2, x2*y2*z2], [ii,jj,kk]",
            "end",
            "coeff, (ii,jj,kk) = interpolation(pos)",
            "T_inter = coeff ⋅ T[ii-1:ii, jj-1:jj, kk-1:kk]"
        ],
        "description": ["Picar interpolation"]
    },
    "Picar location2d": {
        "prefix": ["Picar location2d"],
        "body": [
            "function location2d(pos::Array{Float64})",
            "\t# The pos is inside X[ii-1, ii], Y[jj-1, jj], Z[kk-1, kk]. If pos is out of region, ii = 2 or imax",
            "\tii = jj = 2",
            "\tfor i = 2:length(X)",
            "\t\tii = i",
            "\t\tX[i] > pos[1] && break",
            "\tend",
            "\tfor j = 2:length(Y)",
            "\t\tjj = j",
            "\t\tY[j] > pos[2] && break",
            "\tend",
            "\tii, jj",
            "end"
        ],
        "description": ["Picar location2d"]
    },
    "Picar interpolation2d": {
        "prefix": ["Picar interpolation2d"],
        "body": [
            "function interpolation2d(pos::Array{Float64})",
            "\t# return the interpolation matrix and grid location",
            "\tii, jj = location2d(pos)",
            "\tx1, y1 = (X[ii] - pos[1]) / (X[ii] - X[ii-1]), (Y[jj] - pos[2]) / (Y[jj] - Y[jj-1])",
            "\tx2, y2 = 1 .- (x1, y1)",
            "\t[x1*y1, x2*y1, x1*y2, x2*y2],  [ii,jj]",
            "end",
            "coeff, (ii,jj) = interpolation2d(pos)",
            "T_inter = coeff ⋅ T[ii-1:ii, jj-1:jj]"
        ],
        "description": ["Picar interpolation2d"]
    },
    "Picar calAreaNorm": {
        "prefix": ["Picar calAreaNorm"],
        "body": [
            "function calAreaNorm(vortex::Array{Float64}, element::Array{Float64})",
            "\tnele = size(element,2)",
            "\tarea_i = zeros(nele)",
            "\tnormal_i = zeros(3,nele)",
            "\tfor iele = 1:nele",
            "\t\tv = element[:,iele]",
            "\t\tline1 = vortex[:,v[2]] - vortex[:,v[1]]",
            "\t\tline2 = vortex[:,v[3]] - vortex[:,v[2]]",
            "\t\tnormal_i[:,iele] = line1 × line2",
            "\t\tnorm_i = norm(normal_i[:,iele])",
            "\t\tarea_i[iele] = norm_i / 2",
            "\t\tnormal_i[:,iele] = normal_i[:,iele] / norm_i",
            "\tend",
            "\tarea_i, normal_i",
            "end"
        ],
        "description": ["Picar calAreaNorm"]
    },
    "Picar writeMarker2": {
        "prefix": ["Picar writeMarker2"],
        "body": [
            "function writeMarker(filename::String, vortexs::Array{Array{Float64}}, vortexvalues::Array{Array{Float64}}, elements::Array{Array{Float64}})",
            "\tnbody = length(vortexs)",
            "\topen(filename, \"w\") do io",
            "\t\tprintln(io, \"TITLE='3D TRIANGULAR SURFACE DATA'\")",
            "\t\tprintln(io, \"VARIABLES= 'X','Y','Z','Tm','Tp','Tnm','Tnp' \")",
            "\t\tfor ibody = 1:nbody",
            "\t\t\tprintln(io, \"ZONE T=unstruc, N=\\$(size(vortexs[ibody],2)), E=\\$(size(elements[ibody],2)), F=FEPOINT ET=TRIANGLE\")",
            "\t\t\tfor ivortex = 1:size(vortexs[ibody],2)",
            "\t\t\t\tprintln(io, join([@sprintf \" %16.8f\" i for i = vortexs[ibody][:, ivortex]]), join([@sprintf \" %16.8f\" i for i = vortexvalues[ibody][:, ivortex]]))",
            "\t\t\tend",
            "\t\t\tfor ele = eachcol(elements[ibody])",
            "\t\t\t\tprintln(io, \"\\$(ele[1]) \\$(ele[2]) \\$(ele[3])\")",
            "\t\t\tend",
            "\t\tend",
            "\tend",
            "end"
        ],
        "description": ["Picar writeMarker2"]
    },
    "Picar writeMarker": {
        "prefix": ["Picar writeMarker"],
        "body": [
            "function writeMarker(filename::String, vortexs::Array{Array{Float64}}, elements::Array{Array{Float64}})",
            "\tnbody = length(vortexs)",
            "\topen(filename, \"w\") do io",
            "\t\tprintln(io, \"TITLE='3D TRIANGULAR SURFACE DATA'\")",
            "\t\tprintln(io, \"VARIABLES= 'X','Y','Z' \")",
            "\t\tfor ibody = 1:nbody",
            "\t\t\tprintln(io, \"ZONE T=unstruc, N=\\$(size(vortexs[ibody],2)), E=\\$(size(elements[ibody],2)), F=FEPOINT ET=TRIANGLE\")",
            "\t\t\tfor ivortex = 1:size(vortexs[ibody],2)",
            "\t\t\t\tprintln(io, join([@sprintf \" %16.8f\" i for i = vortexs[ibody][:, ivortex]]))",
            "\t\t\tend",
            "\t\t\tfor ele = eachcol(elements[ibody])",
            "\t\t\t\tprintln(io, \"\\$(ele[1]) \\$(ele[2]) \\$(ele[3])\")",
            "\t\t\tend",
            "\t\tend",
            "\tend",
            "end"
        ],
        "description": ["Picar writeMarker"]
    },
    "Picar locateMarker": {
        "prefix": ["Picar locateMarker"],
        "body": [
            "function locateMarker(filename::String)",
            "\tmarkers, elements = readmarker(filename)",
            "\tmarkers = markers[1]",
            "\telements = elements[1]",
            "\telelocation = zeros(3, size(elements, 2))",
            "\tfor iele = 1:size(elements,2)",
            "\t\tele = elements[:, iele]",
            "\t\telelocation[:, iele] = (markers[:, ele[1]] + markers[:, ele[2]] + markers[:, ele[3]]) / 3",
            "\tend",
            "\teleOut = [1:size(elements, 2);][-0.05 .< elelocation[3, :] .< 0.05]",
            "\teleOut",
            "end"
        ],
        "description": ["Picar locateMarker"]
    },
    "Picar debug_point": {
        "prefix": ["Picar debug_point"],
        "body": [
            "function debug_point(markers::Array{Real})",
            "\topen(\"debug_point.dat\", \"w\") do io",
            "\t\tprintln(io, \"VARIABLES='X','Y','Z'\")",
            "\t\tfor imarker = eachcol(markers)",
            "\t\t\tprintln(io, join([@sprintf \" %16.8f\" i for i = imarker]))",
            "\t\tend",
            "\tend",
            "end"
        ],
        "description": ["Picar debug_point"]
    },
    "Picar writeMarkerT": {
        "prefix": ["Picar writeMarkerT"],
        "body": [
            "function writeMarkerT(filename::String, markers::Array{Array{Float64}}, elements::Array{Array{Float64}}, elevalues::Array{Array{Float64}})",
            "\tprintln(\"Writing \\$filename\")",
            "\tnbody = length(markers)",
            "\topen(filename, \"w\") do io",
            "\t\tprintln(io, \"VARIABLES= 'X','Y','Z','Tm','Tp','Tnm','Tnp'\")",
            "\t\tfor ibody = 1:nbody",
            "\t\t\tprintln(io, \"ZONE T=markerT N=\\$(size(markers[ibody],2)), E=\\$(size(elements[ibody],2)), DATAPACKING=BLOCK, VARLOCATION=([4,5,6,7]=CELLCENTERED), ZONETYPE=FEtriangle\")",
            "\t\t\tprintln(io, sprintf(markers[ibody][1,:], 20))",
            "\t\t\tprintln(io, sprintf(markers[ibody][2,:], 20))",
            "\t\t\tprintln(io, sprintf(markers[ibody][3,:], 20))",
            "\t\t\tprintln(io, sprintf(elevalues[ibody][1,:], 20))",
            "\t\t\tprintln(io, sprintf(elevalues[ibody][2,:], 20))",
            "\t\t\tprintln(io, sprintf(elevalues[ibody][3,:], 20))",
            "\t\t\tprintln(io, sprintf(elevalues[ibody][4,:], 20))",
            "\t\t\tfor ele = eachcol(elements[ibody])",
            "\t\t\t\tprintln(io, \"\\$(ele[1]) \\$(ele[2]) \\$(ele[3])\")",
            "\t\t\tend",
            "\t\tend",
            "\tend",
            "end"
        ],
        "description": ["Picar writeMarkerT"]
    },
    "Picar markerT_ave": {
        "prefix": ["Picar markerT_ave"],
        "body": [
            "function markerT_ave()",
            "\tif project.markerT",
            "\t\tmarkers_p, elements_p, markervalues, elevalues, areas = readmarkerT(project.file)",
            "\telse",
            "\t\tmarkers_p, elements_p = readmarker(project.file)",
            "\tend",
            "\televalues_p = [zeros(4, size(body, 2)) for body = elements_p]",
            "\tfor file = files.start : files.dump : files.last",
            "\t\tmarkers, elements, markervalues, elevalues, areas = readmarkerT(@sprintf \"markerT.%07d\" file)",
            "\t\televalues_p .+= elevalues",
            "\tend",
            "\televalues_p ./= length(files.start : files.dump : files.last)",
            "\twritemarkerT(project.file*\".markerT\", markers_p, elements_p, elevalues_p)",
            "end"
        ],
        "description": ["Picar markerT_ave"]
    }
}
